{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Build app after auth updates",
			"type": "shell",
			"command": "npm run -s build",
			"isBackground": false,
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "Build app after supplier auth",
			"type": "shell",
			"command": "npm run -s build",
			"isBackground": false,
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "typecheck",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"isBackground": false,
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "typecheck",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"group": "build"
		},
		{
			"label": "typecheck",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"isBackground": false,
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "typecheck",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"isBackground": false,
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "typecheck (on-demand)",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "typecheck (after readers update)",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"problemMatcher": [
				"$tsc"
			],
			"group": "build"
		},
		{
			"label": "typecheck (on-demand)",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "dev (dry-run)",
			"type": "shell",
			"command": "cross-env WA_DRY_RUN=true npm run dev",
			"isBackground": true,
			"group": "build"
		},
		{
			"label": "dev (dry-run)",
			"type": "shell",
			"command": "$env:WA_DRY_RUN=\"true\"; npm run dev",
			"isBackground": true,
			"group": "build"
		},
		{
			"label": "typecheck (on-demand)",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "typecheck (on-demand)",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "dev (dry-run, pwsh)",
			"type": "shell",
			"command": "$env:WA_DRY_RUN=\"true\"; npm run dev",
			"isBackground": true,
			"group": "build"
		},
		{
			"label": "prisma migrate deploy (on-demand)",
			"type": "shell",
			"command": "npx prisma migrate deploy",
			"group": "build"
		},
		{
			"label": "vitest (db persistence)",
			"type": "shell",
			"command": "npm run -s test -w",
			"args": [],
			"group": "build"
		},
		{
			"label": "typecheck (after closing route fix)",
			"type": "shell",
			"command": "npm run typecheck",
			"args": [],
			"group": "build"
		},
		{
			"label": "typecheck (second pass)",
			"type": "shell",
			"command": "npm run -s typecheck",
			"group": "build"
		},
		{
			"label": "typecheck (finalize)",
			"type": "shell",
			"command": "npm run -s typecheck",
			"group": "build"
		},
		{
			"label": "playwright: install browsers",
			"type": "shell",
			"command": "npx playwright install --with-deps",
			"group": "build"
		},
		{
			"label": "playwright: live smoke (BASE_URL)",
			"type": "shell",
			"command": "$env:BASE_URL=\"https://barakafresh.com\"; npx playwright test -c playwright.config.ts",
			"group": "build"
		},
		{
			"label": "install playwright deps",
			"type": "shell",
			"command": "npm i -D @playwright/test@^1.48.2",
			"group": "build"
		}
	]
}