name: Smoke tests (Playwright)

on:
  workflow_dispatch:
  push:
    branches: [ main, ci/* ]
    paths:
      - 'src/**'
      - 'playwright/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'yarn.lock'
      - 'tsconfig.json'
      - '.github/workflows/smoke-tests.yml'

permissions:
  contents: read

concurrency:
  group: smoke-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gpt-only:
    name: GPT-only WA flow
    runs-on: ubuntu-latest
    environment:
      name: "Production – butchery-app"
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: butchery
          POSTGRES_PASSWORD: butchery
          POSTGRES_DB: butchery
        options: >-
          --health-cmd="pg_isready -U butchery" --health-interval=10s --health-timeout=5s --health-retries=10
    env:
      # Prefer production env secret when provided; fallback to local Postgres service
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://butchery:butchery@localhost:5432/butchery?connect_timeout=10' }}
      NEXT_TELEMETRY_DISABLED: 1
      APP_TZ: Africa/Nairobi
      PORT: 3002
      BASE_URL: http://localhost:3002
      WA_DRY_RUN: 'true'
      WA_GPT_ONLY: 'true'
      WA_AI_ENABLED: 'true'
      WA_INTERACTIVE_ENABLED: 'true'
      WA_TABS_ENABLED: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Force sync to latest main
        if: ${{ github.ref_name == 'main' }}
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main
          git checkout -B main origin/main
          echo "Using commit:" $(git rev-parse HEAD)

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Ensure DB envs
        run: |
          echo "DATABASE_URL=${DATABASE_URL:-postgresql://butchery:butchery@localhost:5432/butchery?connect_timeout=10}" >> $GITHUB_ENV
          echo "DATABASE_URL_UNPOOLED=${DATABASE_URL_UNPOOLED:-$DATABASE_URL}" >> $GITHUB_ENV

      - name: Prisma generate (always)
        run: |
          npx prisma generate
      - name: Prisma migrate (prod-safe) or push (local)
        run: |
          if [[ "$DATABASE_URL" == postgresql://butchery:butchery@localhost* ]]; then \
            echo "Using local ephemeral DB → prisma db push --accept-data-loss"; \
            npx prisma db push --accept-data-loss; \
          else \
            echo "Using environment DB → prisma migrate deploy"; \
            npx prisma migrate deploy || echo "No migrations to apply"; \
          fi

      - name: Install Playwright (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: Start dev server (3002)
        run: |
          nohup npm run dev:3002 > dev.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server to be ready
        run: |
          for i in {1..90}; do
            curl -fsS http://localhost:3002/api/health/db && READY=1 || READY=0
            if [ "$READY" -eq 1 ]; then exit 0; fi
            sleep 2
          done
          echo "Server did not become ready in time" >&2
          echo "==== dev.log (tail) ====" && tail -n 300 dev.log || true
          exit 1

      - name: Debug - show commit and test header
        run: |
          echo "Commit SHA:" $(git rev-parse HEAD)
          echo "First lines of playwright/wa.gpt-only.smoke.spec.ts:" 
          sed -n '1,60p' playwright/wa.gpt-only.smoke.spec.ts | sed -n '1,60p'

      - name: Debug - show server flags endpoint
        run: |
          curl -fsS http://localhost:3002/api/wa/dev/flags || true

      - name: Run Playwright (GPT-only)
        run: npx playwright test -c playwright.config.ts playwright/wa.gpt-only.smoke.spec.ts --project=chromium --reporter=line,html --workers=1

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-gpt-only
          path: |
            playwright-report
            test-results
            dev.log
          if-no-files-found: warn

      - name: Stop dev server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi

      - name: Post job summary
        if: always()
        run: |
          echo "### GPT-only job status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts: playwright-report-gpt-only, test-results, dev.log" >> $GITHUB_STEP_SUMMARY

  legacy:
    name: Legacy WA-only smoke
    runs-on: ubuntu-latest
    needs: gpt-only
    environment:
      name: "Production – butchery-app"
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: butchery
          POSTGRES_PASSWORD: butchery
          POSTGRES_DB: butchery
        options: >-
          --health-cmd="pg_isready -U butchery" --health-interval=10s --health-timeout=5s --health-retries=10
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://butchery:butchery@localhost:5432/butchery?connect_timeout=10' }}
      NEXT_TELEMETRY_DISABLED: 1
      APP_TZ: Africa/Nairobi
      PORT: 3002
      BASE_URL: http://localhost:3002
      WA_DRY_RUN: 'true'
      WA_GPT_ONLY: 'false'
      WA_AI_ENABLED: 'false'
      WA_INTERACTIVE_ENABLED: 'true'
      WA_TABS_ENABLED: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Force sync to latest main
        if: ${{ github.ref_name == 'main' }}
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main
          git checkout -B main origin/main
          echo "Using commit:" $(git rev-parse HEAD)

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Ensure DB envs
        run: |
          echo "DATABASE_URL=${DATABASE_URL:-postgresql://butchery:butchery@localhost:5432/butchery?connect_timeout=10}" >> $GITHUB_ENV
          echo "DATABASE_URL_UNPOOLED=${DATABASE_URL_UNPOOLED:-$DATABASE_URL}" >> $GITHUB_ENV

      - name: Prisma generate (always)
        run: |
          npx prisma generate
      - name: Prisma migrate (prod-safe) or push (local)
        run: |
          if [[ "$DATABASE_URL" == postgresql://butchery:butchery@localhost* ]]; then \
            echo "Using local ephemeral DB → prisma db push --accept-data-loss"; \
            npx prisma db push --accept-data-loss; \
          else \
            echo "Using environment DB → prisma migrate deploy"; \
            npx prisma migrate deploy || echo "No migrations to apply"; \
          fi

      - name: Install Playwright (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: Start dev server (3002)
        run: |
          nohup npm run dev:3002 > dev.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server to be ready
        run: |
          for i in {1..90}; do
            curl -fsS http://localhost:3002/api/health/db && READY=1 || READY=0
            if [ "$READY" -eq 1 ]; then exit 0; fi
            sleep 2
          done
          echo "Server did not become ready in time" >&2
          echo "==== dev.log (tail) ====" && tail -n 300 dev.log || true
          exit 1

      - name: Run Playwright (legacy WA-only)
        run: npx playwright test -c playwright.config.ts playwright/wa.smoke.spec.ts --project=chromium --reporter=line,html --workers=1

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-legacy
          path: |
            playwright-report
            test-results
            dev.log
          if-no-files-found: warn

      - name: Stop dev server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi

      - name: Post job summary
        if: always()
        run: |
          echo "### Legacy WA-only job status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts: playwright-report-legacy, test-results, dev.log" >> $GITHUB_STEP_SUMMARY

  period-3days:
    name: 3-day period flow
    runs-on: ubuntu-latest
    needs: legacy
    environment:
      name: "Production – butchery-app"
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: butchery
          POSTGRES_PASSWORD: butchery
          POSTGRES_DB: butchery
        options: >-
          --health-cmd="pg_isready -U butchery" --health-interval=10s --health-timeout=5s --health-retries=10
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://butchery:butchery@localhost:5432/butchery?connect_timeout=10' }}
      NEXT_TELEMETRY_DISABLED: 1
      APP_TZ: Africa/Nairobi
      PORT: 3002
      BASE_URL: http://localhost:3002
      WA_DRY_RUN: 'true'
      WA_GPT_ONLY: 'false'
      WA_AI_ENABLED: 'false'
      WA_INTERACTIVE_ENABLED: 'true'
      WA_TABS_ENABLED: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Force sync to latest main
        if: ${{ github.ref_name == 'main' }}
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main
          git checkout -B main origin/main
          echo "Using commit:" $(git rev-parse HEAD)

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Ensure DB envs
        run: |
          echo "DATABASE_URL=${DATABASE_URL:-postgresql://butchery:butchery@localhost:5432/butchery?connect_timeout=10}" >> $GITHUB_ENV
          echo "DATABASE_URL_UNPOOLED=${DATABASE_URL_UNPOOLED:-$DATABASE_URL}" >> $GITHUB_ENV

      - name: Prisma generate (always)
        run: |
          npx prisma generate
      - name: Prisma migrate (prod-safe) or push (local)
        run: |
          if [[ "$DATABASE_URL" == postgresql://butchery:butchery@localhost* ]]; then \
            echo "Using local ephemeral DB → prisma db push --accept-data-loss"; \
            npx prisma db push --accept-data-loss; \
          else \
            echo "Using environment DB → prisma migrate deploy"; \
            npx prisma migrate deploy || echo "No migrations to apply"; \
          fi

      - name: Install Playwright (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: Start dev server (3002)
        run: |
          nohup npm run dev:3002 > dev.log 2>&1 &
          echo $! > server.pid

      - name: Wait for server to be ready
        run: |
          for i in {1..90}; do
            curl -fsS http://localhost:3002/api/health/db && READY=1 || READY=0
            if [ "$READY" -eq 1 ]; then exit 0; fi
            sleep 2
          done
          echo "Server did not become ready in time" >&2
          echo "==== dev.log (tail) ====" && tail -n 300 dev.log || true
          exit 1

      - name: Run Playwright (3-day flow)
        run: npx playwright test -c playwright.config.ts playwright/period.flow.3days.spec.ts --project=chromium --reporter=line,html --workers=1

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-3days
          path: |
            playwright-report
            test-results
            dev.log
          if-no-files-found: warn

      - name: Stop dev server
        if: always()
        run: |
          if [ -f server.pid ]; then kill $(cat server.pid) || true; fi

      - name: Post job summary
        if: always()
        run: |
          echo "### 3-day period flow job status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts: playwright-report-3days, test-results, dev.log" >> $GITHUB_STEP_SUMMARY
