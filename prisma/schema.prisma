generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Outlet {
  id         String      @id @default(cuid())
  name       String      @unique
  code       String? @unique
  active     Boolean     @default(true)
  attendants Attendant[]
}

model Product {
  id        String  @id @default(cuid())
  key       String  @unique
  name      String
  unit      String
  sellPrice Int
  active    Boolean @default(true)
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model PersonCode {
  id     String     @id @default(cuid())
  name   String?
  code   String     @unique
  role   PersonRole
  active Boolean    @default(true)
}

model AttendantScope {
  id         String         @id @default(cuid())
  codeNorm   String         @unique
  outletName String
  products   ScopeProduct[]
}

model ScopeProduct {
  id         String         @id @default(cuid())
  scopeId    String
  productKey String
  scope      AttendantScope @relation(fields: [scopeId], references: [id], onDelete: Cascade)

  @@unique([scopeId, productKey])
}

model PricebookRow {
  id         String  @id @default(cuid())
  outletName String
  productKey String
  sellPrice  Int
  active     Boolean @default(true)

  @@unique([outletName, productKey])
}

model SupplyOpeningRow {
  id         String @id @default(cuid())
  date       String
  outletName String
  itemKey    String
  qty        Float
  buyPrice   Float  @default(0)
  unit       String

  @@unique([date, outletName, itemKey])
}

model SupplyTransfer {
  id             String   @id @default(cuid())
  date           String
  fromOutletName String
  toOutletName   String
  itemKey        String
  qty            Float
  unit           String
  createdAt      DateTime @default(now())
}

model AttendantClosing {
  id         String @id @default(cuid())
  date       String
  outletName String
  itemKey    String
  closingQty Float
  wasteQty   Float  @default(0)

  @@unique([date, outletName, itemKey])
}

model AttendantDeposit {
  id         String        @id @default(cuid())
  date       String
  outletName String
  code       String?
  note       String?
  amount     Int
  status     DepositStatus @default(PENDING)
  createdAt  DateTime      @default(now())
}

model AttendantExpense {
  id         String   @id @default(cuid())
  date       String
  outletName String
  name       String
  amount     Int
  createdAt  DateTime @default(now())
}

/// Manual counted till per day/outlet
model AttendantTillCount {
  id         String   @id @default(cuid())
  date       String
  outletName String
  counted    Float    @default(0)

  @@unique([date, outletName])
}

model ActivePeriod {
  id            String   @id @default(cuid())
  outletName    String   @unique
  periodStartAt DateTime
}

/// Settings store for mirroring localStorage JSON
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

/// Tiny table for attendant assignments (code → outlet + products)
model AttendantAssignment {
  code        String   @unique
  outlet      String
  updatedAt   DateTime @updatedAt
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  productKeys Json

  @@map("AttendantAssignment")
}

/// Mapping between person login codes and WhatsApp phone numbers (E.164)
model PhoneMapping {
  id        String   @id @default(cuid())
  code      String   @unique
  role      String
  phoneE164 String
  outlet    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code], map: "phonemapping_code_idx")
}

/// Chatrace API settings (singleton row id=1)
model ChatraceSetting {
  id        Int      @id @default(1)
  apiBase   String
  apiKey    String
  fromPhone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Supply requests originating from WhatsApp or other sources
model SupplyRequest {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  outlet      String
  productKey  String
  qty         Float
  status      String
  source      String
  requestedBy String?
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Minimal auth/session models for persistent attendant login and outlet binding
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Attendant {
  id         String      @id @default(cuid())
  name       String
  salaryAmount    Float        @default(0)
  salaryFrequency SalaryFrequency @default(daily)
  outletId   String?
  loginCode  String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  outletRef  Outlet?     @relation(fields: [outletId], references: [id])
  loginCodes LoginCode[]
  sessions   Session[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model LoginCode {
  id          String    @id @default(cuid())
  code        String    @unique
  attendantId String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  attendant   Attendant @relation(fields: [attendantId], references: [id])
}

model Session {
  id          String    @id @default(cuid())
  attendantId String
  outletCode  String?
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  attendant   Attendant @relation(fields: [attendantId], references: [id])
}

/// Tiny KV table to back selected localStorage keys in the DB
model AppState {
  key       String   @id
  value     Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

/// Supervisor review queue items (DB-backed, replaces local-only queues)
model ReviewItem {
  id        String   @id @default(cuid())
  type      String
  outlet    String
  date      DateTime
  payload   Json
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// WhatsApp message logs (outbound + inbound + status updates)
model WaMessageLog {
  id           String   @id @default(cuid())
  attendantId  String?
  direction    String
  templateName String?
  payload      Json
  waMessageId  String?  @unique
  status       String?
  type         String?
  createdAt    DateTime @default(now())
}

/// WhatsApp chat session state (per phone)
model WaSession {
  id        String   @id @default(cuid())
  phoneE164 String   @unique
  role      String
  code      String?
  outlet    String?
  state     String   @default("IDLE")
  cursor    Json?
  sessionVersion Int    @default(0)
  lastFinalizeAt DateTime?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

/// Track idempotent reminder sends (per day/phone/type)
model ReminderSend {
  id        String   @id @default(cuid())
  type      String
  phoneE164 String
  date      String
  createdAt DateTime @default(now())

  @@unique([type, phoneE164, date])
}

/// Supervisor commission per day/outlet (accumulates into 24th→24th periods)
model SupervisorCommission {
  id              String   @id @default(cuid())
  date            String   // YYYY-MM-DD
  outletName      String
  supervisorCode  String?  // PersonCode.code or external code
  supervisorPhone String?  // E.164 for convenience

  salesKsh        Int      @default(0)  // revenue at sell price
  expensesKsh     Int      @default(0)
  wasteKsh        Int      @default(0)  // waste valued at sell price
  profitKsh       Int      @default(0)  // sales - expenses - waste

  commissionRate  Float    @default(0.10)
  commissionKsh   Int      @default(0)

  periodKey       String   // e.g., 2025-09-24_to_2025-10-23
  status          String   @default("calculated") // calculated|adjusted|approved|paid
  note            String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([date, outletName])
  @@index([periodKey, supervisorCode])
}

enum PersonRole {
  attendant
  supervisor
  supplier
}

enum DepositStatus {
  VALID
  PENDING
  INVALID
}

enum SalaryFrequency {
  daily
  weekly
  monthly
}

/// =========================
/// Decision & Performance Intelligence models
/// Note: We align with existing conventions (date as String YYYY-MM-DD, productKey, outletName)
/// to avoid breaking current flows and to simplify joins.

/// Per-outlet financial targets and defaults
model OutletTargets {
  id           String   @id @default(cuid())
  outletName   String   @unique
  gpTargetDay  Float    @default(0)
  npTargetDay  Float    @default(0)
  wastePctMax  Float    @default(0.08) // default 8%
  depositRatio Float    @default(1.0)
  createdAt    DateTime @default(now())
}

/// Product-specific deposit expectations (e.g., potatoes)
model ProductDepositRule {
  id         String   @id @default(cuid())
  productKey String   @unique
  ratio      Float    // e.g., 0.75
  multiplier Float?   // e.g., 130 for potatoes
  createdAt  DateTime @default(now())
}

/// Per-outlet/per-product waste ceilings
model WasteThreshold {
  id          String   @id @default(cuid())
  productKey  String
  outletName  String
  maxWastePct Float    // 0-1
  createdAt   DateTime @default(now())

  @@unique([productKey, outletName])
}

/// Computed financial metrics for outlet/day
model OutletPerformance {
  id               String   @id @default(cuid())
  date             String   // YYYY-MM-DD
  outletName       String
  totalSales       Float    @default(0)
  totalCost        Float    @default(0)
  grossProfit      Float    @default(0)
  expenses         Float    @default(0)
  netProfit        Float    @default(0)
  deposits         Float    @default(0)
  expectedDeposit  Float    @default(0)
  deficit          Float    @default(0)
  variancePct      Float    @default(0)
  wasteCost        Float    @default(0)
  wastePct         Float    @default(0)
  createdAt        DateTime @default(now())

  @@unique([date, outletName])
}

/// Shift metadata to attribute KPIs
model Shift {
  id           String    @id @default(cuid())
  date         String    // YYYY-MM-DD
  outletName   String
  attendantId  String
  attendant    Attendant @relation(fields: [attendantId], references: [id])
  createdAt    DateTime  @default(now())

  @@unique([date, outletName, attendantId])
}

/// Link attendants to products for attribution
model ProductAssignment {
  id           String    @id @default(cuid())
  attendantId  String
  outletName   String
  productKey   String
  shareRule    Float     @default(1.0) // split factor among attendants
  isPrimary    Boolean   @default(true)
  attendant    Attendant @relation(fields: [attendantId], references: [id])
  createdAt    DateTime  @default(now())

  @@unique([attendantId, outletName, productKey])
}

/// Daily KPI per attendant per outlet
model AttendantKPI {
  id               String    @id @default(cuid())
  date             String    // YYYY-MM-DD
  attendantId      String
  outletName       String
  sales            Float     @default(0)
  gp               Float     @default(0)
  expenses         Float     @default(0)
  np               Float     @default(0)
  salaryDay        Float     @default(0)
  roiVsSalary      Float     @default(0)
  wasteCost        Float     @default(0)
  wastePct         Float     @default(0)
  depositExpected  Float     @default(0)
  depositActual    Float     @default(0)
  depositGap       Float     @default(0)
  redFlags         String[]
  createdAt        DateTime  @default(now())
  attendant        Attendant @relation(fields: [attendantId], references: [id])

  @@unique([date, attendantId, outletName])
}

/// Daily supply snapshot per product for reorder logic
model ProductSupplyStat {
  id               String   @id @default(cuid())
  date             String   // YYYY-MM-DD
  outletName       String
  productKey       String
  salesQty         Float    @default(0)
  wasteQty         Float    @default(0)
  openingQty       Float    @default(0)
  supplyQty        Float    @default(0)
  closingQty       Float    @default(0)
  ma7_salesQty     Float?
  ma14_salesQty    Float?
  leadTimeDays     Int?
  safetyStock      Float?
  reorderPoint     Float?
  parLevel         Float?
  currentIntervalId String?
  intervalDayIndex  Int?
  createdAt        DateTime @default(now())

  @@unique([date, outletName, productKey])
}

/// System-generated supply recommendations
model SupplyRecommendation {
  id            String   @id @default(cuid())
  date          String   // YYYY-MM-DD
  outletName    String
  productKey    String
  action        String
  reason        String
  suggestedQty  Float    @default(0)
  confidence    Float    @default(0)
  createdAt     DateTime @default(now())

  @@unique([date, outletName, productKey])
}

/// Performance across supply intervals (between supplies)
model SupplyIntervalPerformance {
  id               String   @id @default(cuid())
  outletName       String
  productKey       String
  startSupplyId    String
  endSupplyId      String?
  startedAt        DateTime
  endedAt          DateTime?
  openingQty       Float    @default(0)
  addlSupplyQty    Float    @default(0)
  salesQty         Float    @default(0)
  wasteQty         Float    @default(0)
  closingQty       Float    @default(0)
  stockoutEvents   Int      @default(0)
  avgDailyVelocity Float    @default(0)
  sellThroughPct   Float    @default(0)
  revenue          Float    @default(0)
  costOfGoods      Float    @default(0)
  grossProfit      Float    @default(0)
  gpPct            Float    @default(0)
  depositExpected  Float    @default(0)
  depositActual    Float    @default(0)
  depositGap       Float    @default(0)
  priceChanges     Int      @default(0)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  @@unique([outletName, productKey, startSupplyId])
}

/// Day-close tracking per outlet/day (separate from legacy ActivePeriod)
model DayClosePeriod {
  id           String   @id @default(cuid())
  outletName   String
  businessDate String   // YYYY-MM-DD
  status       String   // OPEN|SUBMITTED|LOCKED
  submittedAt  DateTime?
  lockedAt     DateTime?
  lockedBy     String?
  closingNotes String?
  closingHash  String?
  createdAt    DateTime @default(now())

  @@unique([outletName, businessDate])
}
