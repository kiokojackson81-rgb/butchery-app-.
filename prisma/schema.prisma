// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum PersonRole {
  attendant
  supervisor
  supplier
}

enum DepositStatus {
  VALID
  PENDING
  INVALID
}

model Outlet {
  id      String  @id @default(cuid())
  name    String  @unique
  code    String?
  active  Boolean @default(true)
  attendants Attendant[]
}

model Product {
  id        String  @id @default(cuid())
  key       String  @unique
  name      String
  unit      String  // "kg" | "pcs"
  sellPrice Int
  active    Boolean @default(true)
}

model PersonCode {
  id     String     @id @default(cuid())
  name   String?
  code   String     @unique
  role   PersonRole
  active Boolean    @default(true)
}

model AttendantScope {
  id         String         @id @default(cuid())
  codeNorm   String         @unique
  outletName String
  products   ScopeProduct[]
}

model ScopeProduct {
  id         String          @id @default(cuid())
  scopeId    String
  productKey String
  scope      AttendantScope  @relation(fields: [scopeId], references: [id], onDelete: Cascade)

  @@unique([scopeId, productKey])
}

model PricebookRow {
  id         String  @id @default(cuid())
  outletName String
  productKey String
  sellPrice  Int
  active     Boolean @default(true)

  @@unique([outletName, productKey])
}

model SupplyOpeningRow {
  id         String  @id @default(cuid())
  date       String  // YYYY-MM-DD
  outletName String
  itemKey    String
  qty        Float
  buyPrice   Float   @default(0)
  unit       String  // "kg" | "pcs"

  @@unique([date, outletName, itemKey])
}

model SupplyTransfer {
  id             String   @id @default(cuid())
  date           String   // YYYY-MM-DD
  fromOutletName String
  toOutletName   String
  itemKey        String
  qty            Float
  unit           String
  createdAt      DateTime @default(now())
}

model AttendantClosing {
  id         String  @id @default(cuid())
  date       String  // YYYY-MM-DD
  outletName String
  itemKey    String
  closingQty Float
  wasteQty   Float   @default(0)

  @@unique([date, outletName, itemKey])
}

model AttendantDeposit {
  id         String        @id @default(cuid())
  date       String        // YYYY-MM-DD
  outletName String
  code       String?
  note       String?
  amount     Int
  status     DepositStatus @default(PENDING)
  createdAt  DateTime      @default(now())
}

model AttendantExpense {
  id         String   @id @default(cuid())
  date       String   // YYYY-MM-DD
  outletName String
  name       String
  amount     Int
  createdAt  DateTime  @default(now())
}

model ActivePeriod {
  id            String   @id @default(cuid())
  outletName    String   @unique
  periodStartAt DateTime
}

/// Settings store for mirroring localStorage JSON
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

/// Tiny table for attendant assignments (code â†’ outlet + products)
model AttendantAssignment {
  id          String   @id @default(cuid())
  code        String   @unique
  outlet      String
  productKeys String[] @db.Text
  updatedAt   DateTime @updatedAt
}

/// Mapping between person login codes and WhatsApp phone numbers (E.164)
model PhoneMapping {
  id        String   @id @default(cuid())
  code      String   @unique
  role      String
  phoneE164 String
  outlet    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Chatrace API settings (singleton row id=1)
model ChatraceSetting {
  id        Int      @id @default(1)
  apiBase   String
  apiKey    String
  fromPhone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Supply requests originating from WhatsApp or other sources
model SupplyRequest {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  outlet      String
  productKey  String
  qty         Float
  status      String
  source      String
  requestedBy String?
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Minimal auth/session models for persistent attendant login and outlet binding
model Attendant {
  id         String     @id @default(cuid())
  name       String
  outletId   String?
  outletRef  Outlet?    @relation(fields: [outletId], references: [id])
  loginCode  String?    @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  sessions   Session[]
  loginCodes LoginCode[]
}

model LoginCode {
  id          String    @id @default(cuid())
  code        String    @unique
  attendantId String
  attendant   Attendant @relation(fields: [attendantId], references: [id])
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}

model Session {
  id          String    @id @default(cuid())
  attendantId String
  attendant   Attendant @relation(fields: [attendantId], references: [id])
  outletCode  String?
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}
